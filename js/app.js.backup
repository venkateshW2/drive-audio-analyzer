// App state
let currentToken = null;
let fileExplorer = null;
let audioPlayer = null;

// DOM elements
const elements = {
    loginView: document.getElementById('loginView'),
    appView: document.getElementById('appView'),
    loginBtn: document.getElementById('loginBtn'),
    logoutBtn: document.getElementById('logoutBtn'),
    userInfo: document.getElementById('userInfo'),
    userName: document.getElementById('userName'),
    userAvatar: document.getElementById('userAvatar'),
    loadingOverlay: document.getElementById('loadingOverlay')
};

// Check if essential elements exist
function checkEssentialElements() {
    const missing = [];
    
    if (!elements.loginView) missing.push('loginView');
    if (!elements.appView) missing.push('appView');
    if (!elements.loginBtn) missing.push('loginBtn');
    
    if (missing.length > 0) {
        console.error('❌ Missing essential DOM elements:', missing);
        return false;
    }
    
    console.log('✅ All essential DOM elements found');
    return true;
}

// Utility functions
function showLoading(text = 'Loading...') {
    if (elements.loadingOverlay) {
        document.getElementById('loadingText').textContent = text;
        elements.loadingOverlay.classList.remove('hidden');
    }
}

function hideLoading() {
    if (elements.loadingOverlay) {
        elements.loadingOverlay.classList.add('hidden');
    }
}

function showApp() {
    if (elements.loginView && elements.appView) {
        elements.loginView.classList.add('hidden');
        elements.appView.classList.remove('hidden');
    }
}

function showLogin() {
    if (elements.loginView && elements.appView) {
        elements.loginView.classList.remove('hidden');
        elements.appView.classList.add('hidden');
    }
}

async function initializeFileExplorer() {
    if (!fileExplorer && typeof FileExplorer !== 'undefined') {
        fileExplorer = new FileExplorer();
        window.fileExplorer = fileExplorer;
        console.log('📁 File explorer initialized');
        
        if (currentToken) {
            fileExplorer.initialize(currentToken);
        }
    }
}

async function initializeAudioPlayer() {
    if (!audioPlayer && typeof AudioPlayer !== 'undefined') {
        audioPlayer = new AudioPlayer();
        window.audioPlayer = audioPlayer;
        console.log('🎵 Audio player initialized');
    }
}

// Auth handling
async function handleLogin() {
    try {
        const token = window.authFunctions?.getAccessTokenFromUrl?.();
        
        if (token) {
            showLoading();
            
            localStorage.setItem('driveToken', token);
            currentToken = token;
            
            const userInfo = await window.authFunctions.getUserInfo(token);
            
            if (elements.userName) elements.userName.textContent = userInfo.name;
            if (elements.userAvatar) elements.userAvatar.src = userInfo.picture;
            if (elements.userInfo) elements.userInfo.classList.remove('hidden');
            if (elements.logoutBtn) elements.logoutBtn.classList.remove('hidden');
            
            window.history.replaceState({}, document.title, window.location.pathname);
            
            showApp();
            await initializeFileExplorer();
            await initializeAudioPlayer();
            hideLoading();
            
            console.log('✅ Login successful!', userInfo);
        } else {
            const storedToken = localStorage.getItem('driveToken');
            if (storedToken) {
                showLoading();
                currentToken = storedToken;
                
                try {
                    const userInfo = await window.authFunctions.getUserInfo(storedToken);
                    if (elements.userName) elements.userName.textContent = userInfo.name;
                    if (elements.userAvatar) elements.userAvatar.src = userInfo.picture;
                    if (elements.userInfo) elements.userInfo.classList.remove('hidden');
                    if (elements.logoutBtn) elements.logoutBtn.classList.remove('hidden');
                    
                    showApp();
                    await initializeFileExplorer();
                    await initializeAudioPlayer();
                    console.log('✅ Auto-login successful!', userInfo);
                } catch (error) {
                    console.log('❌ Stored token invalid, showing login');
                    localStorage.removeItem('driveToken');
                    showLogin();
                }
                hideLoading();
            } else {
                showLogin();
            }
        }
    } catch (error) {
        console.error('❌ Login error:', error);
        alert('Login failed. Please try again.');
        localStorage.removeItem('driveToken');
        showLogin();
        hideLoading();
    }
}

function handleLogout() {
    localStorage.removeItem('driveToken');
    currentToken = null;
    showLogin();
    
    if (elements.userInfo) elements.userInfo.classList.add('hidden');
    if (elements.logoutBtn) elements.logoutBtn.classList.add('hidden');
}

// Initialize app when DOM is ready
document.addEventListener('DOMContentLoaded', () => {
    console.log('🌐 DOM fully loaded');
    
    if (!checkEssentialElements()) {
        console.error('❌ Cannot initialize app - missing DOM elements');
        return;
    }
    
    // Setup event listeners only if elements exist
    if (elements.loginBtn) {
        elements.loginBtn.addEventListener('click', () => {
            if (window.authFunctions?.redirectToGoogleAuth) {
                showLoading();
                window.authFunctions.redirectToGoogleAuth();
            }
        });
    }
    
    if (elements.logoutBtn) {
        elements.logoutBtn.addEventListener('click', handleLogout);
    }
    
    // Check for existing auth
    if (localStorage.getItem('driveToken')) {
        console.log('🔐 Token found → emitting auth:success');
        handleLogin();
    } else {
        showLogin();
    }
});

// Handle auth callback
window.addEventListener('load', () => {
    if (window.location.hash.includes('access_token')) {
        handleLogin();
    }
});